NodeTypeDict = {
#       ----------------Statements----------------
"Assign": "Assign",
"AnnAssign": "Assign",
"AugAssign": "AugAssign",
"Delete": "Statement",
"Pass": "Statement",
"Yield": "Statement",
"Global": "Statement",
"Import": "Statement",
"ImportFrom": "Statement",
#Control_Flow
"Break": "Control_Declerator",
"Continue": "Control_Declerator",
"Return": "Control_Declerator",
"Try": "Control_Declerator",
"If": "If",
"While": "Loop",
"For": "Loop",
#Functions
"ClassDef": "Class_Definition",
"FunctionDef": "Func_Definition",
"Lambda": "Lambda_Definition",

#       ----------------Expressions----------------
"Name": "Name",
"Load": "Load",
"Store": "Store",
"Expr": "Expression",
"IfExp": "Expression",
"Attribute":  "Dot_Operator",
"Call": "Function_Call",
"keyword": "Argument",
"arg": "Argument",
#Literals 
"List": "Literal",
"Dict": "Literal",
"Set": "Literal",
"Constant": "Literal",
#Arithmetic op
"Div": "Arithmetic_Operator",
"Mod": "Arithmetic_Operator",
"Sub": "Arithmetic_Operator",
"Mult": "Arithmetic_Operator",
"Pow": "Arithmetic_Operator",
"Add": "Arithmetic_Operator",
#Comparison_Operator
"Eq": "Comparison_Operator",
"Gt": "Comparison_Operator",
"GtE": "Comparison_Operator",
"Lt": "Comparison_Operator",
"LtE": "Comparison_Operator",
"NotEq": "Comparison_Operator",
"Is": "Comparison_Operator",
"IsNot": "Comparison_Operator",
"In": "Comparison_Operator",
"NotIn": "Comparison_Operator",
#logical operator
"Not": "Logical_Operator",
"Or": "Logical_Operator",
"And": "Logical_Operator",
#Array_Operations
"Subscript": "Array_Operations",
"Slice": "Array_Operations",
"ListComp": "Array_Operations",
"SetComp": "Array_Operations",
"DictComp": "Array_Operations",
}


keywords_dict = {
    "False": "Logical",
    "True": "Logical",
    #"None": "Special",
    "and": "Logical",
    "or": "Logical",
    "not": "Logical",
    #"with": "Context",
    #"async": "Context",
    #"await": "Context",
    "if": "ControlFlow",
    "elif": "ControlFlow",
    "else": "ControlFlow",
    "for": "ControlFlow",
    "while": "ControlFlow",
    "break": "ControlFlow",
    "continue": "ControlFlow",
    "pass": "ControlFlow",
    "def": "Definition",
    "return": "ControlFlow",
    "lambda": "Definition",
    "yield": "ControlFlow",
    #"class": "Definition",
    "try": "ControlFlow",
    "except": "ControlFlow",
    #"finally": "Exception",
    "raise": "ControlFlow",
    #"assert": "Exception",
    #"import": "Imports",
    #"from": "Imports",
    #"as": "Imports",
    #"global": "Special",
    #"nonlocal": "Special",
    "is": "Logical",
    "in": "Logical",
    #"del": "Deletion"
}


